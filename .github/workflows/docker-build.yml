name: Docker Build and Test

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'Dockerfile*'
      - 'package*.json'
      - '.github/workflows/docker-build.yml'
      - 'src/**'
      - 'scripts/**'
      - 'test/**'
      - 'claude-config*'

env:
  DOCKER_HUB_USERNAME: ${{ vars.DOCKER_HUB_USERNAME || 'cheffromspace' }}
  DOCKER_HUB_ORGANIZATION: ${{ vars.DOCKER_HUB_ORGANIZATION || 'intelligenceassist' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'claude-hub' }}
  REGISTRY_CACHE_NAME: ${{ vars.REGISTRY_CACHE_NAME || 'claude-hub-cache' }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Determine which runner to use based on availability
  select-runner:
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.select.outputs.runner }}
    steps:
      - name: Check self-hosted runner availability
        id: select
        run: |
          # Try to check if self-hosted runners are available
          # This is a simple approach - you might want to use GitHub API for more robust checking
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Prefer self-hosted for main branch pushes
            echo "runner=self-hosted,Linux,X64,docker" >> $GITHUB_OUTPUT
          else
            # Use GitHub-hosted for PRs to save self-hosted resources
            echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
          fi

  build-test:
    needs: select-runner
    runs-on: ${{ needs.select-runner.outputs.runner-label }}
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      matrix:
        include:
          - image: claude-hub
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64
            build-args: ""
            has-test-stage: true
          - image: claudecode
            dockerfile: Dockerfile.claudecode
            platforms: linux/amd64
            build-args: ""
            has-test-stage: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.5
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_ORGANIZATION }}/${{ matrix.image }}
          tags: |
            # For PRs, use pr-NUMBER
            type=ref,event=pr
            # For semantic version tags (v0.1.0 -> 0.1.0, 0.1, 0, latest)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for version tags
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # Nightly tag for main branch pushes
            type=raw,value=nightly,enable=${{ github.ref == 'refs/heads/main' }}

      # Build test target first (only for images with test stage)
      - name: Build test stage
        id: build-test
        if: matrix.has-test-stage
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: test
          platforms: linux/amd64  # Tests only need single platform
          load: true
          tags: ${{ matrix.image }}:test-${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ matrix.image }}-test
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image }}-test
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ${{ matrix.build-args }}

      # Run tests in container if test stage was built
      - name: Run tests in container
        if: matrix.has-test-stage && steps.build-test.outcome == 'success'
        run: |
          docker run --rm \
            -e CI=true \
            -e NODE_ENV=test \
            -v ${{ github.workspace }}/coverage:/app/coverage \
            ${{ matrix.image }}:test-${{ github.sha }} \
            npm test

      # Upload coverage if tests were run
      - name: Upload coverage reports
        if: matrix.has-test-stage && steps.build-test.outcome == 'success'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      # Debug info
      - name: Debug build configuration
        run: |
          echo "Image: ${{ matrix.image }}"
          echo "Dockerfile: ${{ matrix.dockerfile }}"
          echo "Has test stage: ${{ matrix.has-test-stage }}"
          echo "Target: ${{ matrix.has-test-stage && 'production' || '' }}"
          echo "Event: ${{ github.event_name }}"
          echo "Should push: ${{ github.event_name != 'pull_request' }}"
          echo "Should load: ${{ github.event_name == 'pull_request' }}"

      # Build final production image
      - name: Build production image
        id: build-prod
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.has-test-stage && 'production' || '' }}  # Use production target for multi-stage builds
          platforms: linux/amd64  # Always use single platform for now
          push: false  # Never push in this step
          load: true  # Always load locally
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.image }}-prod
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image }}-prod
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ${{ matrix.build-args }}

      # Push the image if not a PR
      - name: Push production image
        if: github.event_name != 'pull_request'
        run: |
          # Parse the tags from metadata output (newline separated)
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pushing $tag"
              docker push "$tag"
            fi
          done

      # Test the production image
      - name: Test production image
        if: github.event_name == 'pull_request' && steps.build-prod.outcome == 'success'
        run: |
          # Basic smoke test - verify image exists
          echo "Checking for image: ${{ env.DOCKER_HUB_ORGANIZATION }}/${{ matrix.image }}:pr-${{ github.event.number }}"
          docker images | grep "${{ env.DOCKER_HUB_ORGANIZATION }}/${{ matrix.image }}" || echo "Image not found in local registry"
          
          # For claude-hub, test the startup script exists
          if [[ "${{ matrix.image }}" == "claude-hub" ]]; then
            echo "Testing claude-hub startup script..."
            docker run --rm \
              -e NODE_ENV=production \
              ${{ env.DOCKER_HUB_ORGANIZATION }}/${{ matrix.image }}:pr-${{ github.event.number }} \
              test -f /app/scripts/runtime/startup.sh && echo "✓ Startup script exists" || echo "✗ Startup script missing"
          fi
          
          # For claudecode, test claude command exists
          if [[ "${{ matrix.image }}" == "claudecode" ]]; then
            echo "Testing claudecode claude command..."
            docker run --rm \
              ${{ env.DOCKER_HUB_ORGANIZATION }}/${{ matrix.image }}:pr-${{ github.event.number }} \
              which claude && echo "✓ Claude command found" || echo "✗ Claude command not found"
          fi

      # Scan for vulnerabilities
      - name: Run Trivy vulnerability scanner
        if: success()  # Only run if previous steps succeeded
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_HUB_ORGANIZATION }}/${{ matrix.image }}:${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'nightly' }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
        continue-on-error: true  # Don't fail the build on scan errors

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: success() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'docker-${{ matrix.image }}'


  update-docker-hub:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.DOCKER_HUB_ORGANIZATION }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.dockerhub.md
          short-description: ${{ github.event.repository.description }}

  # Summary job for branch protection
  docker-build-status:
    if: always()
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ All Docker builds and tests passed successfully"
            exit 0
          else
            echo "❌ Docker build or tests failed"
            exit 1
          fi