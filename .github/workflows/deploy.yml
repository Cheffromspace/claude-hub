name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'  # Semantic versioning tags (v1.0.0, v2.1.3, etc.)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # CD Jobs - Deployment only (CI runs in separate workflows)
  # ============================================
  
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # Deploy after CI passes (Docker images published by docker-publish.yml)
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: ${{ vars.STAGING_URL }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file for staging
        run: |
          cat > .env.staging << EOF
          GITHUB_APP_ID_STAGING=${{ secrets.GITHUB_APP_ID_STAGING }}
          GITHUB_PRIVATE_KEY_STAGING=${{ secrets.GITHUB_PRIVATE_KEY_STAGING }}
          GITHUB_WEBHOOK_SECRET_STAGING=${{ secrets.GITHUB_WEBHOOK_SECRET_STAGING }}
          ANTHROPIC_API_KEY_STAGING=${{ secrets.ANTHROPIC_API_KEY_STAGING }}
          MCP_SERVER_URL_STAGING=${{ vars.MCP_SERVER_URL_STAGING }}
          ALLOWED_ORGS_STAGING=${{ vars.ALLOWED_ORGS_STAGING }}
          ALLOWED_REPOS_STAGING=${{ vars.ALLOWED_REPOS_STAGING }}
          EOF
      
      - name: Validate deployment script
        run: |
          if [ ! -f ./scripts/deploy/deploy-staging.sh ]; then
            echo "::error::Deployment script not found: ./scripts/deploy/deploy-staging.sh"
            exit 1
          fi
          if [ ! -x ./scripts/deploy/deploy-staging.sh ]; then
            echo "::error::Deployment script is not executable: ./scripts/deploy/deploy-staging.sh"
            chmod +x ./scripts/deploy/deploy-staging.sh
            echo "Made deployment script executable"
          fi

      - name: Validate environment file
        run: |
          if [ ! -f .env.staging ]; then
            echo "::error::Environment file not found: .env.staging"
            exit 1
          fi
          # Check if env file has required variables
          grep -q "GITHUB_APP_ID_STAGING" .env.staging || echo "::warning::GITHUB_APP_ID_STAGING not found in env file"
          grep -q "GITHUB_WEBHOOK_SECRET_STAGING" .env.staging || echo "::warning::GITHUB_WEBHOOK_SECRET_STAGING not found in env file"
          
      - name: Deploy to staging
        run: |
          export $(cat .env.staging | xargs)
          ./scripts/deploy/deploy-staging.sh
      
      - name: Clean up
        if: always()
        run: rm -f .env.staging
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              required_contexts: [],
              auto_merge: false,
              description: 'Staging deployment from main branch'
            });
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    if: startsWith(github.ref, 'refs/tags/v')
    # Deploy after CI passes and Docker images are published
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate tag is on main branch
        run: |
          # Get the commit SHA that the tag points to
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
          
          # Check if this commit exists on main branch
          if ! git branch -r --contains $TAG_COMMIT | grep -q "origin/main"; then
            echo "Error: Tag ${{ github.ref_name }} is not on the main branch!"
            echo "Production deployments must be tagged from the main branch."
            exit 1
          fi
          
          echo "âœ“ Tag ${{ github.ref_name }} is on main branch"
      
      - name: Extract version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"
      
      - name: Create .env file for production
        run: |
          cat > .env << EOF
          GITHUB_APP_ID=${{ secrets.GITHUB_APP_ID }}
          GITHUB_PRIVATE_KEY=${{ secrets.GITHUB_PRIVATE_KEY }}
          GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          MCP_SERVER_URL=${{ vars.MCP_SERVER_URL }}
          ALLOWED_ORGS=${{ vars.ALLOWED_ORGS }}
          ALLOWED_REPOS=${{ vars.ALLOWED_REPOS }}
          DEPLOYMENT_VERSION=${{ steps.version.outputs.version }}
          EOF
      
      - name: Validate deployment script
        run: |
          if [ ! -f ./scripts/deploy/deploy-production.sh ]; then
            echo "::error::Deployment script not found: ./scripts/deploy/deploy-production.sh"
            exit 1
          fi
          if [ ! -x ./scripts/deploy/deploy-production.sh ]; then
            echo "::error::Deployment script is not executable: ./scripts/deploy/deploy-production.sh"
            chmod +x ./scripts/deploy/deploy-production.sh
            echo "Made deployment script executable"
          fi

      - name: Validate environment file
        run: |
          if [ ! -f .env ]; then
            echo "::error::Environment file not found: .env"
            exit 1
          fi
          # Check if env file has required variables
          grep -q "GITHUB_APP_ID" .env || echo "::warning::GITHUB_APP_ID not found in env file"
          grep -q "GITHUB_WEBHOOK_SECRET" .env || echo "::warning::GITHUB_WEBHOOK_SECRET not found in env file"
          grep -q "DEPLOYMENT_VERSION" .env || echo "::warning::DEPLOYMENT_VERSION not found in env file"
          
      - name: Deploy to production
        run: |
          export $(cat .env | xargs)
          ./scripts/deploy/deploy-production.sh
      
      - name: Clean up
        if: always()
        run: rm -f .env
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: `Production deployment ${context.ref.replace('refs/tags/', '')}`
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ vars.PRODUCTION_URL }}',
              description: `Deployed version ${context.ref.replace('refs/tags/', '')}`
            });
      
      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Release ${context.ref.replace('refs/tags/', '')}`,
              body: `Production deployment of ${context.ref.replace('refs/tags/', '')}`,
              draft: false,
              prerelease: false
            });
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ steps.version.outputs.version }} ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow