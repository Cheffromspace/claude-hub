<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="44" failures="0" errors="0" time="1.59">
  <testsuite name="Container Execution E2E Tests" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.19" tests="3">
    <testcase classname="Container Execution E2E Tests Container should be properly configured" name="Container Execution E2E Tests Container should be properly configured" time="0.004">
    </testcase>
    <testcase classname="Container Execution E2E Tests Should process a simple Claude request" name="Container Execution E2E Tests Should process a simple Claude request" time="0.001">
    </testcase>
    <testcase classname="Container Execution E2E Tests Should handle errors gracefully" name="Container Execution E2E Tests Should handle errors gracefully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GitHub Controller - Status Events" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.216" tests="7">
    <testcase classname="GitHub Controller - Status Events should handle status success event and schedule debounced review" name="GitHub Controller - Status Events should handle status success event and schedule debounced review" time="0.004">
    </testcase>
    <testcase classname="GitHub Controller - Status Events should handle status success event with no PRs found" name="GitHub Controller - Status Events should handle status success event with no PRs found" time="0.001">
    </testcase>
    <testcase classname="GitHub Controller - Status Events should handle status failure event without triggering review" name="GitHub Controller - Status Events should handle status failure event without triggering review" time="0.001">
    </testcase>
    <testcase classname="GitHub Controller - Status Events should handle status pending event without triggering review" name="GitHub Controller - Status Events should handle status pending event without triggering review" time="0.001">
    </testcase>
    <testcase classname="GitHub Controller - Status Events should handle multiple PRs for the same commit" name="GitHub Controller - Status Events should handle multiple PRs for the same commit" time="0">
    </testcase>
    <testcase classname="GitHub Controller - Status Events should handle error when finding PRs for commit" name="GitHub Controller - Status Events should handle error when finding PRs for commit" time="0.007">
    </testcase>
    <testcase classname="GitHub Controller - Status Events should schedule debounced review with short SHA key" name="GitHub Controller - Status Events should schedule debounced review with short SHA key" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GitHub Service - findPRsForCommit" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.218" tests="4">
    <testcase classname="GitHub Service - findPRsForCommit should return mock PR data in test mode" name="GitHub Service - findPRsForCommit should return mock PR data in test mode" time="0.003">
    </testcase>
    <testcase classname="GitHub Service - findPRsForCommit should validate repository parameters" name="GitHub Service - findPRsForCommit should validate repository parameters" time="0.02">
    </testcase>
    <testcase classname="GitHub Service - findPRsForCommit should validate commit SHA format" name="GitHub Service - findPRsForCommit should validate commit SHA format" time="0.001">
    </testcase>
    <testcase classname="GitHub Service - findPRsForCommit should handle short SHA by rejecting it" name="GitHub Service - findPRsForCommit should handle short SHA by rejecting it" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="AWS Credential Provider" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.221" tests="7">
    <testcase classname="AWS Credential Provider should get credentials from AWS profile" name="AWS Credential Provider should get credentials from AWS profile" time="0.003">
    </testcase>
    <testcase classname="AWS Credential Provider should cache credentials" name="AWS Credential Provider should cache credentials" time="0.001">
    </testcase>
    <testcase classname="AWS Credential Provider should clear credential cache" name="AWS Credential Provider should clear credential cache" time="0">
    </testcase>
    <testcase classname="AWS Credential Provider should get Docker environment variables" name="AWS Credential Provider should get Docker environment variables" time="0">
    </testcase>
    <testcase classname="AWS Credential Provider should throw error if AWS_PROFILE is not set" name="AWS Credential Provider should throw error if AWS_PROFILE is not set" time="0.013">
    </testcase>
    <testcase classname="AWS Credential Provider should throw error for non-existent profile" name="AWS Credential Provider should throw error for non-existent profile" time="0.001">
    </testcase>
    <testcase classname="AWS Credential Provider should throw error for incomplete credentials" name="AWS Credential Provider should throw error for incomplete credentials" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Claude Service" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.222" tests="4">
    <testcase classname="Claude Service processCommand should handle test mode correctly" name="Claude Service processCommand should handle test mode correctly" time="0.005">
    </testcase>
    <testcase classname="Claude Service processCommand should properly set up Docker command in production mode" name="Claude Service processCommand should properly set up Docker command in production mode" time="0.001">
    </testcase>
    <testcase classname="Claude Service processCommand should handle errors properly" name="Claude Service processCommand should handle errors properly" time="0.016">
    </testcase>
    <testcase classname="Claude Service processCommand should write long commands to temp files" name="Claude Service processCommand should write long commands to temp files" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GitHub Controller" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.235" tests="4">
    <testcase classname="GitHub Controller should process a valid webhook with @TestBot mention" name="GitHub Controller should process a valid webhook with @TestBot mention" time="0.005">
    </testcase>
    <testcase classname="GitHub Controller should reject a webhook with invalid signature" name="GitHub Controller should reject a webhook with invalid signature" time="0.019">
    </testcase>
    <testcase classname="GitHub Controller should ignore comments without @TestBot mention" name="GitHub Controller should ignore comments without @TestBot mention" time="0.001">
    </testcase>
    <testcase classname="GitHub Controller should handle errors from Claude service" name="GitHub Controller should handle errors from Claude service" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="githubService" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="0.243" tests="10">
    <testcase classname="githubService getFallbackLabels should identify bug labels correctly" name="githubService getFallbackLabels should identify bug labels correctly" time="0.002">
    </testcase>
    <testcase classname="githubService getFallbackLabels should identify feature labels correctly" name="githubService getFallbackLabels should identify feature labels correctly" time="0">
    </testcase>
    <testcase classname="githubService getFallbackLabels should identify enhancement labels correctly" name="githubService getFallbackLabels should identify enhancement labels correctly" time="0">
    </testcase>
    <testcase classname="githubService getFallbackLabels should identify question labels correctly" name="githubService getFallbackLabels should identify question labels correctly" time="0.001">
    </testcase>
    <testcase classname="githubService getFallbackLabels should identify documentation labels correctly" name="githubService getFallbackLabels should identify documentation labels correctly" time="0">
    </testcase>
    <testcase classname="githubService getFallbackLabels should default to medium priority when no specific priority keywords found" name="githubService getFallbackLabels should default to medium priority when no specific priority keywords found" time="0">
    </testcase>
    <testcase classname="githubService getFallbackLabels should handle empty descriptions gracefully" name="githubService getFallbackLabels should handle empty descriptions gracefully" time="0.001">
    </testcase>
    <testcase classname="githubService addLabelsToIssue - test mode should return mock data in test mode" name="githubService addLabelsToIssue - test mode should return mock data in test mode" time="0.001">
    </testcase>
    <testcase classname="githubService createRepositoryLabels - test mode should return labels array in test mode" name="githubService createRepositoryLabels - test mode should return labels array in test mode" time="0.001">
    </testcase>
    <testcase classname="githubService postComment - test mode should return mock comment data in test mode" name="githubService postComment - test mode should return mock comment data in test mode" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Rate Limiting Middleware" errors="0" failures="0" skipped="0" timestamp="2025-05-25T19:19:30" time="1.506" tests="5">
    <testcase classname="Rate Limiting Middleware should allow requests within the rate limit" name="Rate Limiting Middleware should allow requests within the rate limit" time="0.017">
    </testcase>
    <testcase classname="Rate Limiting Middleware should block requests that exceed the rate limit" name="Rate Limiting Middleware should block requests that exceed the rate limit" time="0.006">
    </testcase>
    <testcase classname="Rate Limiting Middleware should reset rate limit after the window expires" name="Rate Limiting Middleware should reset rate limit after the window expires" time="1.112">
    </testcase>
    <testcase classname="Rate Limiting Middleware should include proper rate limit headers" name="Rate Limiting Middleware should include proper rate limit headers" time="0.002">
    </testcase>
    <testcase classname="Webhook Rate Limiting Integration should rate limit webhook endpoints specifically" name="Webhook Rate Limiting Integration should rate limit webhook endpoints specifically" time="0.008">
    </testcase>
  </testsuite>
</testsuites>